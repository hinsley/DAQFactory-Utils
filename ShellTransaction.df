function ShellTransaction(string workDirectory, string cmd, string stdin)
    // Execute a shell transaction.
    //
    // Note that when Windows shell pipes data out to a file, it creates that file before the command being piped out
    // completes execution. Because this function relies on the existence of an output file to trigger a transaction
    // completion event, this can cause an empty or incomplete read. Instead we pipe shell output to a temporary
    // output file and upon completion have the shell rename that file to its final name, which triggers the event
    // hook and will never produce a faulty result (unless the supplied shell command spawns a non-blocking process
    // which continues to pipe to STDOUT after the main thread has completed execution), which will have undefined
    // behavior.
    //
    // Args:
    // - workDirectory: The directory to operate within. This is useful if
    //   DAQFactory cannot access the directory at which it is installed. This
    //   does not affect commands supplied; absolute paths should always be
    //   used in commands.
    // - cmd: Shell command to supply to CMD.exe.
    // - stdin: STDIN to pipe into shell execution. If an array is supplied,
    //   converts to CSV (1D -> newlines, 2D -> commas). This argument is
    //   optional.
    //
    // Returns:
    // - Up to 2D array containing CSV-decoded STDOUT.
    
    if (isEmpty(workDirectory))
        private workDirectory = ""
    endif
    
    // Find a currently unused transaction ID.
    private transactionId = 0
    while (File.GetFileExists(workDirectory + "transaction.in." + transactionId) || \
           File.GetFileExists(workDirectory + "transaction.out." + transactionId) || \
           File.GetFileExists(workDirectory + "transaction.out." + transactionId + ".tmp"))
        transactionId++
    endwhile
    
    // Build transaction filenames for piping.
    private string inputFileName = workDirectory + "transaction.in." + transactionId
    private string outputFileName = workDirectory + "transaction.out." + transactionId
    private string tmpOutputFileName = outputFileName + ".tmp"
    
    // Create input file from which to pipe STDIN.
    CSVUtils.Write(inputFileName, stdin)
    
    // Execute supplied command.
    System.ShellExecute("cmd", "open", "/C type " + inputFileName + \
                                       " | " + cmd + \
                                       " > " + tmpOutputFileName + \
                                       " & move " + tmpOutputFileName + " " + outputFileName, NULL, "hide")
    
    // Wait until output file is created.
    waitfor(File.GetFileExists(outputFileName), 1)
    
    // Delete input file.
    while (File.GetFileExists(inputFileName))
        try
            File.Delete(inputFileName)
        catch()
            // System.ErrorMessage(strLastError)
        endcatch
    endwhile
    
    // Retrieve output.
    private string output = CSVUtils.Read(outputFileName)
    
    // Delete output file.
    while (File.GetFileExists(outputFileName))
        try
            File.Delete(outputFileName)
        catch()
            // System.ErrorMessage(strLastError)
        endcatch
    endwhile
    
    return output
endfunction
